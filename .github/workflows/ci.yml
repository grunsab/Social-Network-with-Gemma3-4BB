name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Run tests on multiple browsers'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  FLASK_APP: app.py
  DATABASE_URL: sqlite:///test.db
  SECRET_KEY: test-secret-key
  FLASK_ENV: test

jobs:
  # Backend Python tests
  backend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest

  # Frontend and E2E tests
  cypress-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ (github.event.inputs.browsers == 'true' || github.event_name == 'schedule') && fromJson('["chrome", "firefox", "edge"]') || fromJson('["chrome"]') }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Install all dependencies
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    # Setup database
    - name: Initialize database
      run: flask db upgrade

    # Start servers with simplified startup
    - name: Start servers
      run: |
        # Start backend
        python app.py > backend.log 2>&1 &
        
        # Start frontend
        cd frontend && npm run dev > ../frontend.log 2>&1 &
        
        # Wait for servers to be ready
        echo "Waiting for servers to start..."
        timeout 60 bash -c '
          until curl -sf http://localhost:5001/api/v1/categories > /dev/null; do
            echo "Waiting for backend..."
            sleep 2
          done
          echo "✓ Backend ready"
          
          until curl -sf http://localhost:5173 > /dev/null; do
            echo "Waiting for frontend..."
            sleep 2
          done
          echo "✓ Frontend ready"
        ' || {
          echo "❌ Server startup failed"
          echo "=== Backend logs ==="
          cat backend.log
          echo "=== Frontend logs ==="
          cat frontend.log
          exit 1
        }

    # Run Cypress tests
    - name: Cypress tests (${{ matrix.browser }})
      uses: cypress-io/github-action@v6
      with:
        working-directory: ./frontend
        browser: ${{ matrix.browser }}
        config: baseUrl=http://localhost:5173
        spec: |
          cypress/e2e/auth.cy.js
          cypress/e2e/category.cy.js
          cypress/e2e/feed.cy.js
          cypress/e2e/invites.cy.js
          cypress/e2e/posts.cy.js

    # Upload test artifacts
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots-${{ matrix.browser }}
        path: frontend/cypress/screenshots
        retention-days: 7

    - name: Upload videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos-${{ matrix.browser }}
        path: frontend/cypress/videos
        retention-days: 7

    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: server-logs-${{ matrix.browser }}
        path: |
          backend.log
          frontend.log
        retention-days: 7

  # Summary job for required status checks
  ci-success:
    needs: [backend-tests, cypress-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check results
      run: |
        if [ "${{ needs.backend-tests.result }}" != "success" ] || [ "${{ needs.cypress-tests.result }}" != "success" ]; then
          echo "❌ CI failed"
          exit 1
        fi
        echo "✅ All tests passed!"